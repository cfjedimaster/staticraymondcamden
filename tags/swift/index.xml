<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Raymond Camden</title>
    <link>http://www.raymondcamden.com/tags/swift/</link>
    <description>Recent content in Swift on Raymond Camden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Dec 2015 08:44:30 +0600</lastBuildDate>
    <atom:link href="http://www.raymondcamden.com/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Swift goes open source, and loads of new resources</title>
      <link>http://www.raymondcamden.com/2015/12/04/swift-goes-open-source-and-loads-of-new-resources</link>
      <pubDate>Fri, 04 Dec 2015 08:44:30 +0600</pubDate>
      
      <guid>http://www.raymondcamden.com/2015/12/04/swift-goes-open-source-and-loads-of-new-resources</guid>
      <description>&lt;p&gt;Yesterday was a big day for Swift developers - Apple announced the open source release of the Swift language. There&amp;rsquo;s a new home for this initiative, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift.org&lt;/a&gt;, and the complete source for the language is up on GitHub: &lt;a href=&#34;https://github.com/apple/swift&#34;&gt;https://github.com/apple/swift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Swift is an interesting language. I learned ObjectiveC about a year or so ago when I was still working for Adobe. I respect the language, but it never felt like one I&amp;rsquo;d like to use on a day to day basis. I&amp;rsquo;ve just played a bit with Swift, and it feels a lot more approachable then ObjectiveC, especially for those of us who may be coming from a web background and have pre-existing knowledge of JavaScript.&lt;/p&gt;

&lt;p&gt;By open sourcing Swift, Apple has really broadened the environments where Swift can be used. You could now consider using Swift on the server, which is a powerful combination if you&amp;rsquo;re already using Swift in your mobile application. Having one language for both the front end and back end is pretty darn compelling!&lt;/p&gt;

&lt;p&gt;So where does IBM come into play? We&amp;rsquo;ve partnered with Apple to help the Swift developer community. You can read more at our developer center:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.ibm.com/swift/&#34;&gt;&lt;img src=&#34;http://www.raymondcamden.com/wp-content/uploads/2015/12/shot11.png&#34; alt=&#34;shot1&#34; width=&#34;500&#34; height=&#34;213&#34; class=&#34;aligncenter size-full wp-image-7207&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the &lt;a href=&#34;https://developer.ibm.com/swift/&#34;&gt;Swift@IBM&lt;/a&gt;, you&amp;rsquo;ll find articles, links, and even cooler, a web-based &lt;a href=&#34;http://swiftlang.ng.bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-swift-_-lp&#34;&gt;Sandbox&lt;/a&gt; that let&amp;rsquo;s you test Swift in your browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.raymondcamden.com/wp-content/uploads/2015/12/shot2.png&#34; alt=&#34;shot2&#34; width=&#34;750&#34; height=&#34;554&#34; class=&#34;aligncenter size-full wp-image-7208&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure you use the drop down on the upper left side to try out the different samples. I missed that at first. XCode itself provides a way to test code, but I found this web-based sandbox a lot easier to use.&lt;/p&gt;

&lt;p&gt;In 2016, I plan on focusing on two things - Node.js and Swift. I had already planned on this before the announcement, but this move by Apple just cements my choice.&lt;/p&gt;

&lt;p&gt;Finally, for a good perspective on this announcement and what it means for development, I suggest this article: &lt;a href=&#34;https://developer.ibm.com/swift/2015/12/03/swift-moves-to-open-source-a-development-perspective/&#34;&gt;https://developer.ibm.com/swift/2015/12/03/swift-moves-to-open-source-a-development-perspective/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>